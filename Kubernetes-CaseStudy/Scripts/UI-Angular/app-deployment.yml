apiVersion: apps/v1 # For versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:   # Data that helps  uniquely identify the object (using name, UID and namespace)
  name: angular-k8s-deployment
spec:  # What state you desire for the object
  selector:  # The selector field defines how the deployment finds which pod to manage
    matchLabels:
      app: angular-k8s-deployment
  replicas: 3  # Tells the deployment to run 3 pods matching the template
  template:
    metadata:
      labels:  # Labels are used as indentifying attributes for objects such as pods and replication controller.
        app: angular-k8s-deployment
    spec:
      containers:
        - name: angular-k8s-deployment
          image: thulasi29ndocker/my-angular-app:latest # Image to run

          ports:
            - containerPort: 80
          #volume mounts are used to mount volumes to the pod
          volumeMounts:
            - mountPath: /usr/src/app # Mount the volume to the specified path
              name: app-volume
      volumes: # Volumes are used to mount volumes to the pod
        - name: app-volume
          hostPath:
            path: /usr/src/app # Host path to mount
---
# Define a 'Persistent Voulume Claim'(PVC) for Mysql Storage, dynamically provisioned by cluster
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: webapp-pv-claim # name of PVC essential for identifying the storage data
  labels:
    app: angular-k8s-deployment
    tier: application
spec:
  accessModes:
    - ReadWriteOnce   #This specifies the mode of the claim that we are trying to create.
  resources:
    requests:
      storage: 1Gi    #This will tell kubernetes about the amount of space we are trying to claim.
---

apiVersion: v1
kind: Service
metadata:
  name: angular-k8s-service
  labels:
    name: angular-k8s-deployment
spec:
  ports:
    - nodePort: 30170 # make the service available to network requests from external clients
      port: 80        # access the service via external port no
      targetPort: 80  # port number that container listening on
    selector:
    app: angular-k8s-deployment
  type: loadBalancer
